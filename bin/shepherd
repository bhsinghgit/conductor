#!/usr/bin/env python
import os
import sys
import json
import time
import fcntl
import base64

thread   = sys.argv[1]
session  = "%s.%010d.%06d" % (thread, int(time.time()), os.getpid())
sequence = 0

def append(tag, msg):
    global sequence
    sequence += 1

    utc = time.time()

    os.write(3, '\n{0}.{1}.{2}.{3}.{4} {5}'.format(
        session,
        '%010d' % (sequence),
        time.strftime("%y%m%d.%H%M%S", time.gmtime(utc)),
        '%06d' % (int((utc - int(utc)) * 1000000)),
        tag,
        msg
    ))

def blob(msg):
    b64enc = base64.b64encode(msg)
    append(len(b64enc), b64enc)
    return sequence

def log(tag, msg=None):
    if msg is None:
        msg = tag
        tag = '-'

    index = msg.find('\n')
    if index > -1:
        append(tag, msg[:index])
    else:
        append(tag, msg)

def ymdH(subtract_hour=0):
    now = int(time.time()) - (subtract_hour*3600)
    return int(time.strftime('%y%m%d%H',time.gmtime((now//(6*3600))*6*3600)))

if thread in ['notifier', 'launcher', 'collector', 'shipper']:
    logseq = ymdH()
    oldseq = ymdH(12)

    os.umask(0)

    map(os.close, range(3))
    os.open('/dev/null', os.O_RDONLY)

    for path in ['stdout', 'stderr']:
        os.open('{0}.{1}.{2}'.format(thread, path, logseq),
                os.O_CREAT|os.O_WRONLY|os.O_APPEND,
                0644)

    os.open('log.{0}'.format(logseq), os.O_CREAT|os.O_WRONLY|os.O_APPEND, 0644)

    lock = os.open('{0}.lock'.format(thread), os.O_CREAT|os.O_RDONLY, 0444)
    fcntl.flock(lock, fcntl.LOCK_EX|fcntl.LOCK_NB)

    for path in os.listdir('.'):
        fields = path.split('.')
        if (3 == len(fields)) and (fields[1] in ['stdout', 'stderr']):
            if int(fields[2]) < oldseq:
                os.remove(path)

    module = getattr(__import__('shepherd.' + thread), thread)

    module.conf = json.load(open('shepherd.json'))
    module.log  = log
    module.blob = blob

    module.run(time.time() + 300)

    os.close(4)
    os.system(' '.join(sys.argv))
