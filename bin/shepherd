#!/usr/bin/env python
#* * * * * cd /tmp/test && key=<agentkey> /tmp/test/bin/shepherd <ip>:<port>

import os
import re
import sys
import pwd
import json
import time
import fcntl
import signal
import base64
import random
import httplib
import hashlib


class HTTP(object):
    def __init__(self, server):
        self.server = server

    def client(self, method, resource, args=None):
        start_time = time.time()

        request = status = reason = response = conn = None
        try:
            request = json.dumps(args, indent=4, sort_keys=True)

            conn = httplib.HTTPConnection(self.server)
            conn.request(method, resource, request, headers = {
                'X-SHEPHERD-APPID': os.environ.get('APPID'),
                'X-SHEPHERD-APPKEY': os.environ.get('APPKEY'),
                'X-SHEPHERD-AGENTKEY': os.environ.get('KEY')})

            r = conn.getresponse()

            status, reason, response = r.status, r.reason, r.read()
        except Exception as e:
            status, reason, response = 500, 'EXCEPTION', json.dumps(str(e))
        finally:
            if conn:
                conn.close()

        if 'logger' in globals():
            logger.log('API', ('method({0}) resource({1}) status({2}) ' +
                'msec({3}) request({4}) response({5})').format(
                 method, resource, '{0} {1}'.format(status, reason),
                 int((time.time()-start_time)*1000),
                 len(request) if (200 == status) else logger.blob(request),
                 len(response) if (200 == status) else logger.blob(response)))

        return status, reason, json.loads(response)

    def get(self, resource, args=None):
         return self.client('GET', resource, args)

    def post(self, resource, args=None):
        return self.client('POST', resource, args)


class Logger(object):
    def __init__(self, thread, session=None):
        if not session:
            session = os.environ['SESSION']

        self.sequence = 0
        self.session  = "[%s %s" % (thread, session)

    def log(self, msgORtag, message=None):
        self.sequence += 1

        utc = time.time()

        tag, msg = (msgORtag, message) if message else ('LOG', msgORtag)
            
        if ('BLOB' == tag) or (msg.find('\n') > -1):
            tag = 'BLOB'
            msg = base64.b64encode(msg)

        hdr = '{0} {1} {2}.{3} {4}]'.format(self.session, self.sequence,
            time.strftime("%y%m%d.%H%M%S", time.gmtime(utc)),
            '%06d' % (int((utc - int(utc)) * 1000000)), tag)

        os.write(3, '\n{0} : {1}'.format(hdr, msg))

        return hashlib.md5(hdr).hexdigest()

    def blob(self, msg):
        return '<{0}>'.format(self.log('BLOB', msg))


def worker(state, event):
    workflow = state['workflow']
    input    = state['input']

    if 'init' == event['code']:
        control_info = dict(state='init', seq=0)
        continuation = None
    else:
        control_info = state['control_info']
        continuation = state['continuation']
        control_info['seq'] += 1

    current_state = control_info['state']

    try:
        result = (None,)
        module = __import__(workflow)
        module.logger = logger

        if event['code'] in ['alarm', 'init', 'locked']:
            method_name = control_info['state']
        else:
            method_name = 'handler'

        logger.log('method({0}) input({1}) state({2}) event({3})'.format(
            method_name,
            logger.blob(json.dumps(input, indent=4, sort_keys=True)),
            logger.blob(json.dumps(continuation, indent=4, sort_keys=True)),
            logger.blob(json.dumps(event, indent=4, sort_keys=True))))

        method = getattr(module, method_name)
        if 'handler' == method_name:
            result = method(input, continuation, event)
        else:
            result = method(input, continuation)

        if len(result) < 2:
            raise Exception('invalid return value')
    except Exception as e:
        logger.log('aborted -> current({0}) return({1}) exception({2})'.format(
                current_state, result[0], str(e)))
        return dict(status=str(e))

    if 2 == len(result):
        logger.log('completed -> method({0}) return({1})'.format(
                current_state, result[0]))
        return dict(status=result[1])

    next_state = None
    if 'retry' != result[0]:
        next_state = module.workflow.get((method_name, result[0]))
        if next_state:
            control_info['state'] = next_state
    else:
            next_state = control_info['state']
            
    commit_dict = dict(status=result[1],
                       state=dict(workflow=workflow,
                                  input=input,
                                  control_info=control_info,
                                  continuation=result[2]))

    if 'lock' == result[0]:
        commit_dict['lock']   = result[3]

    if 'unlock' == result[0]:
        commit_dict['unlock'] = result[3]

    if 'message' == result[0]:
        commit_dict['message'] = result[3]

    if 'moveto' == result[0]:
        commit_dict['pool'] = result[3]

    if (next_state is not None) and ('lock' != result[0]):
        commit_dict['alarm'] = 0

    if  result[0] in ['sleep', 'alarm', 'retry']:
        commit_dict['alarm'] = result[3]

    logger.log('next -> method({0}) return({1}) next({2})'.format(
            method_name, result[0], next_state))
    return commit_dict


if len(sys.argv) > 1:
    logseq = time.strftime('%y%m%d', time.gmtime())

    os.dup2(os.open('/dev/null', os.O_RDONLY), 0)
    os.dup2(os.open('err.%s' % (logseq), os.O_CREAT|os.O_WRONLY|os.O_APPEND), 1)
    os.dup2(os.open('log.%s' % (logseq), os.O_CREAT|os.O_WRONLY|os.O_APPEND), 3)
    os.dup2(1, 2)

    status, reason, config = HTTP(sys.argv[1]).get('/config')

    os.environ['MYIP'] = config['agentip']
    os.environ['SESSION'] = time.strftime('%y%m%d%H',time.gmtime())
    os.environ['TASK_SERVER'] = config['task_server']

    logger = Logger('{0}.{1}'.format('shepherd', config['agentip']))

    try:
        if not os.path.isdir('apps'):
            os.mkdir('apps')

        lockfd = os.open('apps', os.O_RDONLY)
        fcntl.flock(lockfd, fcntl.LOCK_EX|fcntl.LOCK_NB)
    except Exception as e:
        logger.log('could not acquire lock. exception({0})'.format(str(e)))
        exit()

    oldseq = int(time.strftime('%y%m%d%H', time.gmtime(time.time()-86400)))
    logfiles = dict()
    for path in os.listdir('.'):
        match = re.search('(err|log)\.(\d{6})', path)
        if match:
            if ('err' == match.group(1)) and (int(match.group(2)) < oldseq):
                os.remove(path)
                logger.log('removed {0}'.format(path))
            elif 'log' == match.group(1):
                logfiles[match.group(2)] = dict(
                    offset=0, size=0, fd=os.open(match.group(0), os.O_RDONLY))
                logger.log('tracking logfile({0})'.format(match.group(2)))

    signal.signal(signal.SIGCHLD, signal.SIG_IGN)

    timeout = time.time() + 300
    while time.time() < timeout:
        myip = config['agentip']
        status, reason, pending = HTTP(config['task_server']).get('/pending')
        if (200 == status) and (myip in pending['allocation']):
            proc_count = dict()
            for d in [d for d in os.listdir('/proc') if d.isdigit()]:
                try:
                    uid = os.stat('/proc/{0}'.format(d)).st_uid
                except OSError:
                    pass

                proc_count.setdefault(uid, 0)
                proc_count[uid] += 1

            nobody_gid = pwd.getpwnam('nobody').pw_gid
            for uid, async_count in pending['allocation'][myip].iteritems():
                app = pending['applications'][uid]

                if app['username']:
                    uid = pwd.getpwnam(app['username']).pw_uid
                else:
                    uid = int(uid)

                os.environ['APPKEY'] = app['appkey']
                os.environ['APPID'] = str(app['appid'])

                if app['syspath']:
                    os.environ['SYSPATH'] = app['syspath']

                app_dir = os.path.join('apps', str(uid))
                if not os.path.isdir(app_dir):
                    os.mkdir(app_dir, 0700)
                    os.chown(app_dir, uid, nobody_gid)

                count = 0
                for i in range(async_count - proc_count.get(uid, 0)):
                    if 0 == os.fork():
                        os.closerange(4, 1000)
    
                        os.chdir(app_dir)
                        os.setsid()
                        os.setgid(nobody_gid)
                        os.setuid(uid)

                        signal.signal(signal.SIGCHLD, signal.SIG_DFL)

                        os.execv(app['python'], [app['python'], sys.argv[0]])
                    else:
                        count += 1
                if count > 0:
                    logger.log('spawned count({0}) workers for uid({1})'.format(
                            count, uid))

        conn = httplib.HTTPConnection(config['log_server'])
        shipping_time = time.time() + random.randint(5, 15)
        while time.time() < shipping_time:
            sleep = 0
            for ymd, file in logfiles.iteritems():
                offset, size, fd = file['offset'], file['size'], file['fd']

                assert(offset <= os.fstat(fd).st_size)

                if offset < os.fstat(fd).st_size:
                    os.lseek(fd, offset, os.SEEK_SET)

                    conn.request('POST',
                                 '/log/log.{0}/{1}'.format(ymd, offset),
                                 os.read(fd, size) if size else '')

                    handle = conn.getresponse()

                    if 200 == handle.status:
                        file['offset'] = json.loads(handle.read())['size']
                        file['size'] = 10*1024*1024
                    else:
                        file['size'] = 0
                        sleep = True
                else:
                    yesterday = time.gmtime(time.time()-86400)
                    if ymd < time.strftime('%y%m%d', yesterday):
                        os.remove('log.{0}'.format(ymd))
                        logger.log('removed logfile({0})'.format(ymd))
                    else:
                        sleep += 1
            if len(logfiles) == sleep:
                time.sleep(1)

    time.sleep(1)
    os.closerange(4, 1000)
    os.system(' '.join(sys.argv) + '&')
else:
    appdir = os.getcwd()
    logger = Logger('worker.{0}'.format(os.environ['MYIP']))

    if 'SYSPATH' in os.environ:
        sys.path.append(os.environ['SYSPATH'])

    try:
        import worker as worker_module
    except:
        worker_module = sys.modules['__main__']

    timeout = time.time() + 300
    http = HTTP(os.environ['TASK_SERVER'])
    while time.time() < timeout:
        os.chdir(appdir)

        status, reason, msg = http.post('/lockmessage')
        if (200 != status) or ('NOT_FOUND' == msg):
            break

        worker_module.logger = Logger(str(msg['workerid']), msg['session'])

        event = dict(code=msg['code'])
        if 'data' in msg:
            event['data'] = msg['data']

        result = worker_module.worker(msg['continuation'], event)

        if result is None:
            result = dict(status='WORKER_CRASHED')

        if 'state' in result:
            result['continuation'] = result['state']
            del(result['state'])

        result['msgid']    = msg['msgid']
        result['workerid'] = msg['workerid']

        while True:
            status, reason, msg = http.post('/commit', result)
            if status < 500:
                break
            time.sleep(random.randint(5, 15))
