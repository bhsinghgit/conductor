#!/usr/bin/env python
import json
import base64
import uuid
import time
import optparse

import shepherd.client as client

op = optparse.OptionParser()
op.add_option('--cmd',         dest='cmd')
op.add_option('--type',        dest='type')
op.add_option('--path',        dest='path')
op.add_option('--workername',  dest='workername')
op.add_option('--pool',        dest='pool')
op.add_option('--count',       dest='count')

op.add_option('--input',       dest='input')
op.add_option('--code',        dest='code')
op.add_option('--data',        dest='data')
op.add_option('--delay',       dest='delay')
op.add_option('--workercount', dest='workercount')

(opt, junk) = op.parse_args()

if 'add_app' == opt.cmd:
    print_result(add_app(opt.type, opt.path))
elif 'add_host' == opt.cmd:
    print_result(add_host(opt.count))
elif 'add_pool' == opt.cmd:
    print_result(add_pool(opt.pool))
elif 'add_worker' == opt.cmd:
    print_result(add_worker(open(opt.input).read(), opt.workername))
elif 'send_msg' == opt.cmd:
    print_result(send_msg(opt.workername, opt.code,opt.data,opt.pool,opt.delay))
elif 'test' == opt.cmd:
    client.del_app()
    client.add_app('worker', '/tmp/shepherd/bin/python')
    client.add_host(opt.count)
    client.add_pool('localhost')

    guid = str(uuid.uuid4())

    client.add_worker(json.dumps(dict(workflow='sheepdog',
                                      input=dict(expected=int(opt.workercount),
                                                 guid=guid))),
               'sheepdog')

    for i in range(int(opt.workercount)):
        client.add_worker(json.dumps(dict(workflow='sheep',
                                          input=dict(worker=i,
                                                     count=int(opt.workercount),
                                                     guid=guid))),
                          'sheep-' + str(i))

    while True:
        client.conf['workername'] = 'sheepdog'
        result = client.http_client('POST', 'worker_status', client.conf)
        if (result['status'] is None) or ('NOT_FOUND' == result['status']):
            time.sleep(1)
            continue

        result = json.loads(base64.b64decode(result['status']))
        print(result)
        if result not in ['PASS', 'FAIL']:
            time.sleep(1)
            continue

        break
else:
    print('invalid command')
