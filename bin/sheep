#!/usr/bin/env python
import os
import sys
import time
import json
import base64
import httplib
import importlib

class Logger(object):
    def __init__(self, thread, session=None):
        if not session:
            session = int(time.time())

        self.session  = "%s.%010d.%06d" % (thread, session, os.getpid())
        self.sequence = 0

    def append(self, tag, msg):
        self.sequence += 1

        utc = time.time()

        os.write(3, '\n{0}.{1}.{2}.{3}.{4} {5}'.format(
            self.session,
            '%010d' % (self.sequence),
            time.strftime("%y%m%d.%H%M%S", time.gmtime(utc)),
            '%06d' % (int((utc - int(utc)) * 1000000)),
            tag,
            msg
        ))

    def log(self, tag, msg=None):
        if msg is None:
            msg = tag
            tag = 'notag'

        index = msg.find('\n')
        if index > -1:
            self.append(tag, msg[:index])
        else:
            self.append(tag, msg)

    def blob(self, msg):
        b64enc = base64.b64encode(msg)
        self.append(len(b64enc), b64enc)
        return 'blob-{0}'.format(self.sequence)

def worker(state, event):
    log(event['code'])

    workflow = state['workflow']
    input    = state['input']

    if 'init' == event['code']:
        control_info = dict(state='init', seq=0)
        continuation = None
    else:
        control_info = state['control_info']
        continuation = state['continuation']
        control_info['seq'] += 1

    current_state = control_info['state']

    try:
        result      = (None,)
        module      = importlib.import_module(workflow)
        module.log  = log
        module.blob = blob

        if event['code'] in ['alarm', 'init', 'locked']:
            method_name = control_info['state']
        else:
            method_name = 'handler'

        method = getattr(module, method_name)
        if 'handler' == method_name:
            result = method(input, continuation, event)
        else:
            result = method(input, continuation)

        if len(result) < 2:
            raise Exception('invalid return value')
    except Exception as e:
        log('state transition. current({0}) return({1}) exception({2})'.format(
                current_state, result[0], str(e)))
        return dict(status=str(e))

    if 2 == len(result):
        log('state transition. finished. method({0}) return({1})'.format(
                current_state, result[0]))
        return dict(status=result[1])

    next_state = None
    if 'retry' != result[0]:
        next_state = module.workflow.get((method_name, result[0]))
        if next_state:
            control_info['state'] = next_state
    else:
            next_state = control_info['state']
            
    commit_dict = dict(status=result[1],
                       state=dict(workflow=workflow,
                                  input=input,
                                  control_info=control_info,
                                  continuation=result[2]))

    if 'lock' == result[0]:
        commit_dict['lock']   = result[3]

    if 'unlock' == result[0]:
        commit_dict['unlock'] = result[3]

    if 'alarm' == result[0]:
        commit_dict['alarm'] = result[3]

    if 'message' == result[0]:
        commit_dict['message'] = result[3]

    if (next_state is not None) and ('lock' != result[0]):
        commit_dict['alarm'] = 0

    if 'retry' == result[0]:
        commit_dict['alarm'] = result[3]

    log('state transition. method({0}) return({1}) next({2})'.format(
            method_name, result[0], next_state))
    return commit_dict

def http_client(method, resource, args):
    headers = {
        'X-SHEPHERD-APPID'   : os.environ['APPID'],
        'X-SHEPHERD-AUTHKEY' : os.environ['AUTHKEY']
    }

    args = json.dumps(args)

    conn.request(method, resource, args, headers)

    response = conn.getresponse()
    res      = response.read()

    logger.log('API', ('method({0}) resource({1}) status({2}) ' +
                       'reason({3}) request({4}) response({5})').format(
                       method, resource, response.status,
                       response.reason, len(args), len(res)))
    try:
        body = json.loads(res)
    except ValueError:
        body = None

    return response.status, response.reason, body

appdir = os.getcwd()
conn   = httplib.HTTPConnection(os.environ['APIHOST']+':'+os.environ['APIPORT'])
logger = Logger('worker')

try:
    import worker as worker_module
except:
    worker_module = sys.modules['__main__']

timeout = time.time() + 300
while time.time() < timeout:
    os.umask(0077)
    os.chdir(appdir)

    status, reason, msg = http_client('POST', '/lockmessage', dict())
    if (200 != status) or ('NOT_FOUND' == msg):
        break

    worker_logger = Logger('worker-' + str(msg['workerid']), msg['session'])
    worker_module.log  = worker_logger.log
    worker_module.blob = worker_logger.blob

    event = dict(code=msg['code'])
    if 'data' in msg:
        event['data'] = msg['data']

    result = worker_module.worker(msg['continuation'], event)

    if result is None:
        result = dict(status='WORKER_CRASHED')

    if 'state' in result:
        result['continuation'] = result['state']
        del(result['state'])

    result['msgid']    = msg['msgid']
    result['workerid'] = msg['workerid']

    while True:
        status, reason, msg = http_client('POST', '/commit', result)
        if 500 != status:
            break

        time.sleep(1)
