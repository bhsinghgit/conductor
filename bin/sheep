#!/usr/bin/env python
import os
import sys
import time
import json
import base64
import httplib

class Logger(object):
    def __init__(self, thread, session=None):
        if not session:
            session = int(time.time())

        self.session  = "worker-%s.%010d.%06d" % (thread, session, os.getpid())
        self.sequence = 0

    def append(self, tag, msg):
        self.sequence += 1

        utc = time.time()

        os.write(3, '\n{0}.{1}.{2}.{3}.{4} {5}'.format(
            self.session,
            '%010d' % (self.sequence),
            time.strftime("%y%m%d.%H%M%S", time.gmtime(utc)),
            '%06d' % (int((utc - int(utc)) * 1000000)),
            tag,
            msg
        ))

    def log(self, tag, msg=None):
        if msg is None:
            msg = tag
            tag = '-'

        index = msg.find('\n')
        if index > -1:
            self.append(tag, msg[:index])
        else:
            self.append(tag, msg)

    def blob(self, msg):
        b64enc = base64.b64encode(msg)
        self.append(len(b64enc), b64enc)
        return self.sequence

def worker(state, event):
    state = json.loads(state)

    if 'data' in event:
        event['data'] = json.loads(event['data'])

    if 'init' == event['code']:
        workflow     = state['workflow']
        input        = state['input']
        control_info = dict(state='init', seq=0)
        continuation = None
    else:
        workflow     = state['workflow']
        input        = state['input']
        control_info = state['control_info']
        continuation = state['continuation']

        control_info['seq'] += 1

    current_state = control_info['state']

    try:
        module      = __import__(workflow)
        module.log  = log
        module.blob = blob

        result = (None,)
        method = getattr(module, current_state)
        if 'handler' == current_state:
            result = method(input, continuation, event)
        else:
            result = method(input, continuation)

        if len(result) < 2:
            raise Exception('invalid return value')
    except Exception as e:
        log('state transition. current({0}) return({1}) exception({2})'.format(
                current_state, result[0], str(e)))
        return dict(exception=str(e))

    if 2 == len(result):
        log('state transition. finished. current({0}) return({1})'.format(
                current_state, result[0]))
        return dict(status=json.dumps(result[1]))

    if 'retry' != result[0]:
        control_info['state'] = module.workflow.get((control_info['state'],
                                                     result[0]), 'handler')

    next_state  = control_info['state']
    commit_dict = dict(status=json.dumps(result[1]),
                       state=json.dumps(dict(workflow=workflow,
                                             input=input,
                                             control_info=control_info,
                                             continuation=result[2])))

    if 'lock' == result[0]:
        commit_dict['lock']   = result[3]

    if 'unlock' == result[0]:
        commit_dict['unlock'] = result[3]

    if 'message' == result[0]:
        for m in result[3]:
            if 'data' in m:
                m['data'] = json.dumps(m['data'])

        commit_dict['message'] = result[3]

    if ('handler' != next_state) and ('lock' != result[0]):
        commit_dict['alarm'] = 0

    if 'retry' == result[0]:
        commit_dict['alarm'] = result[3]

    log('state transition. current({0}) return({1}) next({2})'.format(
            current_state, result[0], next_state))
    return commit_dict

def http_client(method, resource, args):
    headers = {
        'X-SHEPHERD-APPID'   : os.environ['APPID'],
        'X-SHEPHERD-AUTHKEY' : os.environ['AUTHKEY']
    }

    args = json.dumps(args)
    conn.request(method, resource, args, headers)

    response = conn.getresponse()
    res      = response.read()

    logger.log('API', ('method({0}) resource({1}) status({2}) reason({3}) ' +
                    'request({4}) response({5})').format(
        method, resource, response.status, response.reason,
        logger.blob(args), logger.blob(res)))

    try:
        body = json.loads(res)
    except ValueError:
        body = None

    return response.status, response.reason, body

conn   = httplib.HTTPConnection(os.environ['APIHOST']+':'+os.environ['APIPORT'])
logger = Logger('worker')

try:
    import worker as worker_module
except:
    worker_module = sys.modules['__main__']

while True:
    status, reason, msg = http_client('POST', 'lockmessage', dict())
    if (200 != status) or ('NOT_FOUND' == msg):
        break

    event = dict(code=msg['code'])
    if 'data' in msg:
        event['data'] = base64.b64decode(msg['data'])

    worker_logger = Logger(msg['workerid'], msg['session'])
    worker_module.log  = worker_logger.log
    worker_module.blob = worker_logger.blob
    result = worker_module.worker(base64.b64decode(msg['continuation']), event)

    if result is None:
        result = dict(status='WORKER_CRASHED')

    if 'status' in result:
        result['status'] = base64.b64encode(result['status'])

    if 'state' in result:
        result['continuation'] = base64.b64encode(result['state'])

    for m in result.get('message', []):
        if 'data' in m:
            m['data'] = base64.b64encode(m['data'])

    result['msgid']    = msg['msgid']
    result['workerid'] = msg['workerid']

    http_client('POST', 'commit', result)
