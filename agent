#!/usr/bin/env python
import os
import sys
import json
import time
import socket
import signal
import util

log, conf, lock  = util.initialize('agent')

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((conf['supervisor_host'], conf['supervisor_port']))

signal.signal(signal.SIGCHLD, signal.SIG_IGN)

while True:
    bytes = ''
    while True:
        b = sock.recv(64*1024)
        if 0 == len(b):
            log('disconnected by supervisor')
            exit(0)
        bytes += b

        try:
            msg = json.loads(bytes)
            log('received message bytes({0})'.format(len(bytes)))
            break
        except ValueError:
            continue

    proc_count = dict()
    for d in [d for d in os.listdir('/proc') if d.isdigit()]:
        try:
            uid = os.stat('/proc/{0}'.format(d)).st_uid
        except OSError:
            pass

        proc_count.setdefault(uid, 0)
        proc_count[uid] += 1

    log(json.dumps(msg, indent=4))
    for uid, app in msg.iteritems():
        count = 0
        for i in range(app['count'] - proc_count.get(int(uid), 0)):
            if 0 == os.fork():
                sock.close()
                util.release_lock(lock)

                fd = os.open(uid + '.key', os.O_CREAT|os.O_WRONLY, 0600)
                os.write(fd, json.dumps(dict(appname=app['appname'],
                                             authkey=app['authkey'],
                                             path=app['path'],
                                             type=app['type'],
                                             api_host=app['api_host'],
                                             api_port=app['api_port']),
                                             indent=4, sort_keys=True))
                os.close(fd)
                os.chown('{0}.key'.format(uid), int(uid), int(uid))

                os.setsid()
                os.setgid(int(uid))
                os.setuid(int(uid))

                if 'worker' == app['type']:
                    command   = os.path.join(app['path'], 'bin', 'python')
                    dirname   = os.path.dirname(sys.argv[0])
                    launcher  = os.path.join(dirname, 'launcher')
                    arguments = [command, launcher]
                elif 'daemon' == app['type']:
                    pass

                print(command)
                os.execv(command, arguments)
            else:
                count += 1
        log('spawned count({0}) procs for uid({1})'.format(count, uid))

    bytes = json.dumps('OK')
    sock.sendall(bytes)
    log('sent message bytes({0})'.format(len(bytes)))
