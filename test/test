#!/usr/bin/env python
import sys
import json
import base64
import uuid
import time
import httplib
import optparse

conf = json.loads(open('shepherd.json').read())
conn = httplib.HTTPConnection(conf['api_host'], conf['api_port'])

def http_client(method, resource, args=None):
    header = {
        'X-SHEPHERD-APPID'   : 100000,
        'X-SHEPHERD-AUTHKEY' : 'authkey'
    }

    conn.request(method, resource, json.dumps(args), header)
    response = conn.getresponse()

    if 200 == response.status:
        return json.loads(response.read())
    else:
        print(json.dumps(args, indent=4, sort_keys=True))
        print('{0} {1} {2} {3}'.format(
            method, resource, response.status, response.reason))
        print(response.read())
        exit(1)

def http_post(resource, args):
    return http_client('POST', resource, args)

def http_put(resource, args):
    return http_client('PUT', resource, args)

def http_get(resource):
    return http_client('GET', resource)

def add_worker(input, workername):
    return http_put('workers', dict(input=base64.b64encode(input),
                                    workername=workername))
def get_status(workerid):
    return http_get('workers/{0}'.format(workerid))

workercount = int(sys.argv[1])

guid = str(uuid.uuid4())
add_worker(json.dumps(dict(workflow='sheepdog',
                           input=dict(expected=workercount,
                                      guid=guid))),
           'sheepdog')

for i in range(workercount):
    add_worker(json.dumps(dict(workflow='sheep',
                               input=dict(worker=i,
                                          count=workercount,
                                          guid=guid))),
               'sheep-' + str(i))

while True:
    result = get_status('sheepdog')
    if (result['status'] is None) or ('NOT_FOUND' == result['status']):
        time.sleep(1)
        continue

    result = json.loads(base64.b64decode(result['status']))
    print(result)
    if result not in ['PASS', 'FAIL']:
        time.sleep(1)
        continue
    break
